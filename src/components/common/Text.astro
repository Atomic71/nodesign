---
export type TextLevel = 'h1' | 'h2' | 'h3' | 'h4' | 'body' | 'small';

export interface Props {
  level: TextLevel;
  color?: 'primary' | 'secondary' | 'accent' | 'light' | 'dark';
  themed?: boolean;
  class?: string;
  asSpan?: boolean;
  label?: string;
}

const {
  level,
  label,
  color,
  themed = true,
  class: className,
  asSpan,
} = Astro.props;

const tagMap = {
  h1: 'h1',
  h2: 'h2',
  h3: 'h3',
  h4: 'h4',
  body: 'p',
  small: 'p',
  span: 'span',
};

const sizeMap = {
  h1: 'text-4xl md:text-5xl font-bold font-display',
  h2: 'text-3xl md:text-4xl font-semibold font-display',
  h3: 'text-2xl md:text-3xl font-medium font-display',
  h4: 'text-xl md:text-xl font-medium font-display',
  body: 'text-base md:text-lg font-sans',
  small: 'text-sm md:text-base font-sans',
};

const colorMap = {
  primary: 'text-primary dark:text-primary-light',
  secondary: 'text-secondary dark:text-secondary-light',
  accent: 'text-accent dark:text-accent-light',
  light: 'text-text-dark',
  dark: 'text-text-light',
};

const themedColorMap = {
  primary: 'text-primary dark:text-primary-light',
  secondary: 'text-secondary dark:text-secondary-light',
  accent: 'text-accent dark:text-accent-light',
  light: 'text-text-dark',
  dark: 'text-text-light',
};

const Tag = asSpan ? 'span' : tagMap[level];
const sizeClass = sizeMap[level];
const colorClass = color
  ? themed
    ? themedColorMap[color]
    : colorMap[color]
  : themed
    ? 'text-text-light dark:text-text-dark'
    : '';
---

<Tag class:list={[sizeClass, colorClass, className]}>
  {label}
  <slot />
</Tag>
